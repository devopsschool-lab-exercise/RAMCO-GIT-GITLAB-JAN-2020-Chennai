CI Process
Release Process
Git
Gitlab
SVN to Git
==================================================
DevOps
        Immediate Release 
        Cost Reduction
        Improve Quality
        https://www.youtube.com/watch?v=-VaVmb_UOC8

What is SDLC Cycle?
Mgr - RamcoX
Product - ProdX
------------------------
Planning ->  Architect -> JIRA - Sharepoint
Dev - 10 FEA - 10 Dev
        Code Integ
                    RCS -> CVS -> SVN -> Git
        Code Ana
                Static - SqlenLite - SonarQube 
                Peer - GITLAB, GERRIT

        Build Mgmt - Maven - msbuild

        UNit TESTING - NUNIT - JUNIT

        pACkAGE - 
                    app
                    sys

        pACK MGMT - NEXUS - ARTIFACTORY
        https://www.devopsschool.com/videos/19/nexus-essential-tutorial-december-2019-by-devopsschool/

        Dep2QA  
                ProdX15.0 - 100 BOXES
        50 - L - 50 W
        50 IIS  - 50 NG
        25 TOM - 25 JBOS - 25 WL - 25 WS
        25 MYSQL - 25 MSSQL - 25 ORACLE - 25 PS
        100 DIFF..
        =================
        1 Dep - 9 mins...
        100 Dep - 9 mins

        AT

        Code Coverage
        =================================================================================
        Plan-> Code-> Analysis->Build->UT ->Pack->Archive->Dep2Qa->AT-CC
        =====================================================================
        jira -> git -> Sonar -> Maven -> Junit -> Jar -> Nexus-> Ansible ->Selenium -> Jacoco
        ====================================================================================
                                    JENKINS - GITLAB CI 

What is Git?
        Open Source tool
        Managing Source Code
        Code Integration tool.
        Version Control tool.
                    WHO
                    What
                    When
                    Why 
                    Where
        Written by 
                    Linus Tovarld
        DISTRIBUTED
        For COde only
==============================
Why git?
        Version Control tool.
                    WHO
                    What
                    When
                    Why 
                    Where

Other tools?
                    RCS -> CVS -> SVN -> Git
                    Vss - cLEARCASE- P4 - MERCURY - tfs

DISTRIBUTED Vs Server-Client
==================================
How to Install git?
        Command
            WINDOWS
                git-scm.com - EXE - 
                    git bash
                    git cmd
                    gitk
        LINUX
                UB - sudo apt-get install git
                RHEL - sudo yum install git
        MAC

        GUI 
            SourceTree - POWER
            TortoiseGit
            Git with Eclipse
            Git with Vs
            Git with Jetbrains
==============================================
RAMCO-GIT-GITLAB-JAN-2020-Chennai

Github.com

FILL THIS FORM for Notes
---------------------------------
http://bit.ly/2N2Keni

FOR CHAT and TROUBELSHOOTING
-----------------------------------
https://tlk.io/devopsschool

========================================================
Basic workflow with git?

Step 1 - Create a repo
$ git init

Step 2 - Have a Source Code

Step 3 - Add a Source Code to Git***[Moving a file to staging]
$ git add file1.txt

### ONE TIME
git config user.name "Rajesh Kumar"
git config user.email "devops@rajeshkumar.xyz"
git config --list

Step 4 - Commit a Source code to git [Moving a file from staging to repo]
git commit -m"This is my first commit"

Step 5 - View a Source Code? See a Commit
git log

Step 6 - What was committed?
git show 6b461805a37601b1c464dce36d1b55043814fbf3

COMMANDS
 507  cd /e
  508  mkdir ramco
  509  cd ramco/
  510  mkdir repo1
  511  cd repo1/
  512  clear
  513  pwd
  514  git init
  515  ls
  516  ls -la
  517  start .
  518  touch file2.txt
  519  cls
  520  clear
  521  git add file1.txt
  522  git config user.name "Rajesh Kumar"
  523  git config user.email "devops@rajeshkumar.xyz"
  524  git config --list
  525  cleas
  526  clear
  527  git commit -m"This is my first commit"
  528  git log
  529  git show 6b461805a37601b1c464dce36d1b55043814fbf3
  530  clear
  531  git log
  532  git show 6b461805a37601b1c464dce36d1b55043814fbf3
  533  git log
  534  git show 6b461805a37601b1c464dce36d1b55043814fbf3
  535  cls
  536  clear
  537  history


$ git log
commit 6b461805a37601b1c464dce36d1b55043814fbf3 (HEAD -> master)
Author: Rajesh Kumar <devops@rajeshkumar.xyz>
Date:   Tue Jan 7 14:03:10 2020 +0530

    This is my first commit

  538  cls
  539  clear
  540  git log
  541  clear
  542  git status
  543  ls
  544  git add .
  545  git status
  546  git commit -m"adding all" file2.txt
  547  git status
  548  git commit -m"adding all"
  549  git status
  550  history

=================================================================
=================================================================
Questions - 
==============================
How to modify a file?
How to rename a file?
How to add all files?
How to create a dir?
How to commit a selective file?
WHat is HEAD?
    HEAD IS a tip curr Branch
How to delete a file?
How to go back in the history n see non deleted a file?
How to come back?

 551  ckear
  552  clear
  553  cler
  554  clear
  555  ls
  556  clear
  557  git status
  558  ls
  559  vi file1.txt
  560  git status
  561  git add .
  562  git status
  563  git commit -m"modifying a file"
  564  clear
  565  git log
  566  clear
  567  ls
  568  start .
  569  clear
  570  ls
  571  git status
  572  git mv file1.txt file11.txt
  573  git status
  574  start .
  575  start .
  576  git status
  577  git add ,
  578  git add .
  579  git status
  580  clear
  581  git commit -m"adding"
  582  ls
  583  clear
  584  mkdir src
  585  git status
  586  ls
  587  touch src/rajesh1.txt
  588  git status
  589  git add
  590  git add .
  591  clear
  592  git status
  593  git commit -m"adding dir"
  594  git status
  595  clear
  596  ls
  597  git log
  598  git log HEAD
  599  clear
  600  git log HEAD~1
  601  git log HEAD
  602  git help log
  603  git log --oneline
  604  clear
  605  git log --oneline
  606  git log HEAD
  607  git log --oneline
  608  clear
  609  git log --oneline
  610  git log HEAD~1
  611  git log HEAD~2
  612  clear
  613  ls
  614  cler
  615  clear
  616  ls
  617  git rm file33.txt
  618  git status
  619  ls
  620  git commit -m"delete"
  621  clear
  622  ls
  623  ls
  624  git status
  625  git log --oneline
  626  git checkout 4e10169
  627  clear
  628  ls
  629  git log HEAD
  630  git checkout master
  631  clear
  632  git log --oneline
  633  ls
  634  history

================================
 634  history
  635  clear
  636  ls
  637  ls -la
  638  clear
  639  ls
  640  ls -la
  641  clear
  642  ls
  643  git push https://github.com/devopsschool-lab-exercise/ramco-test.git master'
  644  git push https://github.com/devopsschool-lab-exercise/ramco-test.git master
  645  clear
  646  git push https://github.com/devopsschool-lab-exercise/ramco-test.git master
  647  git push http://alpha.ramco.com/gitlab/kevin/ramcotest.git master
  648  git push http://alpha.ramco.com/gitlab/kevin/ramcotest.git master
  649  cd ..
  650  start .
  651  clear
  652  http://alpha.ramco.com/gitlab/kevin/ramcotest.git
  653  git clone http://alpha.ramco.com/gitlab/kevin/ramcotest.git
  654  ls
  655  cd ramcotest/
  656  clear
  657  ls
  658  ls -la
  659  git log
  660  clear
  661  touch raj1.txt;git add .;git commit -m"add raj1"
  662  git config user.name "Ramu"
  663  git config user.email "ramu@ramu.com"
  664  touch raj1.txt;git add .;git commit -m"add raj1"
  665  git push origin master
  666  history


 501  cd /e
  502  cd ramco/
  503  ls
  504  cd repo1/
  505  clear
  506  ls
  507  git pull origin master
  508  git remote add origin http://alpha.ramco.com/gitlab/kevin/ramcotest.git
  509  git pull origin master
  510  ls
  511  history
=====================================
GIT BRANCHING AND merging
=====================================
What is Branching?


Why do we need it?
        - DO NOT DISTURB ME
                FEATURE
                BUG
                team
                Personal
                Geographically
https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/branching-strategies-with-tfvc?view=azure-devops
https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops

What is Strategies we follow?

How to work with Git Branch?
===========================================
Type of Git Branch?
        Local Branch    READ & WRITE
        Remote Branch   READ Only
        Tempo Branch    READ & WRITE

 501  cd /e
  502  clear
  503  cd ramco/
  504  clear
  505  ls
  506  mkdir repo2
  507  cd repo2/
  508  clear
  509  start .
  510  git init
  511  git branch
  512  git config user.name "Rajesh kUmar"
  513  git config user.email "devops@rajeshkumar.xyz"
  514  touch file1.txt;git add .;git commit -m"adding"
  515  git log
  516  clear
  517  git branch
  518  git branch -r
  519  touch file2.txt;git add .;git commit -m"adding 2"
  520  git log --oneline
  521  ls
  522  git checkout 1869474
  523  ls
  524  touch file3.txt;git add .;git commit -m"adding 3"
  525  git switch -c temp
  526  git branch
  527  ls
  528  git checkout master
  529  ls
  530  git branch
  531  git checkout temp
  532  ls
  533  clear
  534  git branch
  535  git checkout master


  535  git checkout master
  536  clear
  537  history
  538  clear
  539  ls
  540  ls
  541  git branch fea1
  542  git branch
  543  git checkout fea1
  544  clear
  545  ls
  546  git branch
  547  git checkout temp
  548  ls
  549  git checkout fea1
  550  clear
  551  ls
  552  touch fea1.txt;git add .;git commit -m"fea1"
  553  ls
  554  git checkout master
  555  ls
  556  git checkout temp
  557  clear
  558  ls
  559  git branch temp2
  560  git branch
  561  ls
  562  clear
  563  cd ..
  564  ls
  565  mkdir repo3
  566  cd repo3/
  567  clear
  568  ls
  569  git init --bare
  570  ls
  571  clear
  572  ls
  573  cd ..
  574  ls
  575  cd repo2/
  576  clear
  577  git checkout master
  578  clear
  579  git branch -a
  580  git log
  581  clear
  582  git remote add origin http://alpha.ramco.com/gitlab/kevin/day2.git
  583  git push origin master
  584  clear
  585  ls
  586  git pull origin master
  587  clear
  588  ls
  589  clear
  590  ls
  591  ls
  592  git branch -r
  593  git branch -a
  594  clear
  595  ls
  596  git fetch origin master
  597  elar
  598  clear
  599  ls
  600  git branch -a
  601  git checkout remotes/origin/master
  602  clear
  603  ls
  604  ls
  605  git checkout master
  606  ls
  604  ls
  605  git checkout master
  606  ls
  607  clear
  608  git branch -a
  609  git merge remotes/origin/master
  610  ls

SECOND GUY

 501  cd /e
  502  cd ramco/
  503  ls
  504  mkdir secondguy
  505  cd secondguy/
  506  clear
  507  ls
  508  git clone http://alpha.ramco.com/gitlab/kevin/day2.git
  509  clear
  510  ls
  511  rm -rf day2/
  512  clear
  513  ls
  514  git clone http://alpha.ramco.com/gitlab/kevin/day2.git .
  515  clear
  516  ls
  517  ls -la
  518  clear
  519  ls
  520  git config user.name "Rajesh kumar"
  521  git config user.email "devops@rajeshkumar.xyz"
  522  touch secondguy.txt;git add .;git commit -m"ading secondguy"
  523  git push origin master
  524  touch secondguy1.txt;git add .;git commit -m"ading secondguy 1"
  525  git push origin master
  526  history
=======================================================================
How to merge?
===========================================
Merge TYPES
        1. FAST FORWARd Merge
        2. RECURRSIVE Merge AKS 3 WAY MERGE
        3. CHERRY PICK


 618  mkdir branch1
  619  clear
  620  cd branch1/
  621  clear
  622  git init
  623  touch master1.txt;git add .;git commit -m"adding master1
"
  624  clear
  625  git config user.name "Rajesh Kumar"
  626  git config user.email "devops@rajeshkumar.xyz"
  627  clear
  628  touch master1.txt;git add .;git commit -m"adding master1
"
  629  touch master2.txt;git add .;git commit -m"adding master2
"
  630  clear
  631  ls
  632  touch master3.txt;git add .;git commit -m"adding master3
"
  633  clear
  634  clear
  635  ls
  636  git log --oneline
  637  git switch -c fea1
  638  clear
  639  ls
  640  touch fea1.txt;git add .;git commit -m"adding fea1.txt"
  641  touch fea2.txt;git add .;git commit -m"adding fea2.txt"
  642  clear
  643  ls
  644  touch fea3.txt;git add .;git commit -m"adding fea3.txt"
  645  clear
  646  ls
  647  git merge master
  648  git checkout master
  649  clear
  650  ls
  651  git merge fea1
  652  ls
  653  git log --oneline
  654  history
================================
 654  history
  655  clear
  656  ls
  657  touch master4.txt;git add .;git commit -m"adding master4"
  658  touch master5.txt;git add .;git commit -m"adding master5"
  659  git checkout fea1
  660  clear
  661  ls
  662  touch fea4.txt;git add .;git commit -m"adding fea4"
  663  touch fea5.txt;git add .;git commit -m"adding fea5"
  664  clear
  665  git checkout master
  666  ls
  667  touch master6.txt;git add .;git commit -m"adding master6"
  668  clear
  669  git checkout fea1
  670  ls
  671  touch fea6.txt;git add .;git commit -m"adding fea6"
  672  clear
  673  git checkout master
  674  git log --oneline
  675  git checkout fea1
  676  git log --oneline
  677  clear
  678  git checkout master
  679  clear
  680  git merge fea1
  681  ls
  682  clear
  683  git log --oneline
  684  history
===================================================

 684  history
  685  clear
  686  ls
  687  clear
  688  ls
  689  clear
  690  clear
  691  git checkout fea1
  692  clear
  693  ls
  694  touch cherry1.txt;git add .;git commit -m"adding cherry1"
  695  touch cherry2.txt;git add .;git commit -m"adding cherry2"
  696  touch cherry3.txt;git add .;git commit -m"adding cherry3"
  697  clear
  698  touch cherry4.txt;git add .;git commit -m"adding cherry4"
  699  clear
  700  git log --oneline
  701  ls
  702  clear
  703  git checkout master
  704  clear
  705  git checkout fea1
  706  git log --oneline
  707  git checkout master
  708  clear
  709* l
  710  git cherry-pick 0c5e1f1
  711  ls
  712  git log --oneline
  713  history
=============================================================
How to resolve conflict?
-----------------------
SAME FILE - SAME LINE

DEV1                            DEV2
file1.java                      file1.java
20                              20
function(name,age)              function(name)

INDIA IS MY COUNTRY
I LOVE INDIA
I LOVE STUDY

INDIA IS MY COUNTRY
I LOVE INDIA1
I LOVE STUDY
 714  clear
  715  ls
  716  vi master1.txt
  717  git add .
  718  git commit -m"adding india"
  719  clear
  720  git checkout fea1
  721  ls
  722  vi master1.txt
  723  git add .
  724  clear
  725  git commit -m"Adding India1"
  726  git checkout master
  727  clear
  728  git log --oneline
  729  clear
  730  git merge fea1
  731  git status
  732  clear
  733  ls
  734  vi master1.txt
  735  git status
  736  git add .
  737  git commit -m"resolved conflcit"
  738  clear
  739  git status
  740  git merge fea1
  741  history

================================================
How to see diff between 2 commit?
How to see diff between 2 branch?
How to see diff between working and staging?
How to see diff between working and repo?

  742  clear
  743  git log --oneline
  744  git diff f69af61 6abc2a7
  745  clear
  746  git branch
  747  git diff fea1
  748  clear
  749  ls

git diff - Compare working area to index.
git diff --staged - Compare stage are to repository.
git diff HEAD - Compare working area to repository


UNDOING in GIT
======================
How to clean your file from working dir?
$ git clean -f -d

How to move a file from STAGING to WORKING?
git reset filename

How to revert @repo
 788  git status
  789  touch good.txt;git add .;git commit -m"adding good code"
  790  clear
  791  git status
  792  git log --oneline
  793  touch bad.txt;git add .;git commit -m"adding bad code"
  794  clear
  795  git ls
  796  clear
  797  git status
  798  ls
  799  clear
  800  git log --oneline
  801  clear
  802  git log --oneline
  803  git diff 8a38f34 81c389e
  804  git log --oneline
  805  git revert 8a38f34
  806  git log --oneline
  807  git diff 9d9a3e5 81c389e
  808  git diff 9d9a3e5 8a38f34
  809  ls
===================================================

- Create a Repo in Gitlab.com/Github.com
- Clone a repo using SourceTree
- Create a 5 directory and each has 1 files and commit into repo.
- Push the new commits to remote repo.
- Now, Create a branch called Dev and QA. Dev branch, commit 10 files and QA branch, commit 5 files.
- See a difference between DEV and QA and Master branch.
- Compare multiple commits.
- Now, Merge DEV and QA into Master branch.
- Now, Push a master into remote repo.
- Now, Push a DEV branch into remote repo. 
==========================================================
Working with Stashing
===============
 506  cd repo1
  507  clear
  508  git status
  509  ls
  510  vi file11.txt
  511  vi file2.txt
  512  clear
  513  ls
  514  git status
  515  git add file11.txt
  516  clear
  517  git status
  518  clear
  519  ls
  520  git status
  521  clear
  522  ls
  523  pwd
  524  git status
  525  clear
  526  git help stash
  527  git stash list
  528  git status
  529  clear
  530  git stash
  531  git status
  532  git stash list
  533  ls
  534  vi raj1.txt
  535  git stash list
  536  git status
  537  git stash For2ndtime
  538  git stash -m For2ndtime
  539  git stash -m "For2ndtime"
  540  git stash save for2ndtimed
  541  clear
  542  git stash list
  543  git status
  544  git stash apply stash@{1}
  545  clear
  546  git status
  547  git stash list
  548  git stash drop stash@{1}
  549  git stash list
  550  history

Working with Tagging
===================================
 558  git log --oneline
  559  git tag --list
  560  git tag --list
  561  git tag release11
  562  git tag --list
  563  git show release11
  564  clear
  565  ls
  566  git tag --list
  567  git log --oneline
  568  git help tag
  569  git tag -a release10 6933402 -m "For demo"
  570  git tag --list
  571  git show release10
  572  git tag --list
  573  git checkout release10
  574  git checkout .
  575  git checkout master
  576  clear
  581  git config --list
  582  !
  583  git tag --list
  584  git push origin release10



Working with gitignore
 593  mkdir build
  594  touch build/file1
  595  touch build/file2
  596  touch build/file3
  597  clear
  598  git status
  599  clear
  600  touch lib1
  601  touch lib2
  602  clear
  603  git status
  604  ls
  605  touch file12.txt
  606  clear
  607  git status
  608  vi .gitignore
  609  ls
  610  ls -la
  611  git status
  612  vi .gitignore
  613  clear
  614  git status
  615  git add .
  616  git status
  617  ls
  618  git commit -m"add"
  619  git log
  620  git show dfd969910d6e98ea0380355e0bf72524b45ae734
  621  history


Working with Git Hooks
Location - /e/ramco/repo1/.git/hooks
File name - pre-commit

  Integration with Jira


Git integrationa and use with VS 
Enabling CI/CD from GitLab
===============================================
Pipeline Plan

BUIld  --> Deploy --> TESTING
------------------------------------
Maven  --> Ansible ---> Selenium

Pre -  .gitlab-ci.yml

stages:
    - build
    - deploy
    - test

build:
    stage: build
    script:
        - echo "Building"
        - mkdir build
        - touch build/info.txt
    artifacts:
        paths:
            - build/

deploy:
    stage: deploy
    script:
        - echo "Building"
        - mkdir deploy
        - touch deploy/deploy.txt

test:
    stage: test
    script:
        - echo "Testing"
        - test -f "build/info.txt"








Code Scanning - SQL Enlite





How to migrate from VSS/TFS to Git?



